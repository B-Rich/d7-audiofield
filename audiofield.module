<?php
/**
 * Implementation of hook_init().
 *
 * Load required includes.
 */
function audiofield_init() {
  module_load_include('inc', 'audiofield', 'audiofield_widget');
}
/**
 * Implementation of hook_menu().
 */
function audiofield_menu() {
  
  $items['admin/settings/audiofield'] = array(
    'title' => 'Audio Field',
    'description' => 'Configure Audiofield.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('audiofield_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
      return $items;
}

/**
 * Implementation of hook_perm().
 */
 function audiofield_perm() {
  return array('download own audio files','download all audio files');
}

function audiofield_admin_settings_form() {
  global $base_path;
/*
    $player1=realpath("sites") . "/all/libraries/player/audio-player/player.swf";
    $player2=realpath("sites") . "/all/libraries/player/xspf_player_slim.swf";
    $player3=realpath("sites") . "/all/libraries/player/playerSinglePackage/playerSingle.swf";
	$player4=realpath("sites") . "/all/libraries/player/OriginalThinMusicPlayer.swf";
    $player5=realpath("sites") . "/all/libraries/player/LWMusicPlayer.swf";
*/
	$audio_players=audiofield_players();
	
	foreach($audio_players as $id=>$player){
		$player_url=$base_path.variable_get('audiofield_players_dir', 'sites/all/libraries/player')."/". $player['path'];
		$player_absolute_url=realpath("sites") . "/all/libraries/player/". $player['path'];
		if (file_exists($player_absolute_url)) {
			$players[$id]=call_user_func($player['callback'], $player_url,"");
		}
		else{
			$download_players.='<li>Download '.l($player['name'],$player['download_link']).'</li>';
		}
	}
	
	/*
    if (file_exists($player1)) {
          $players[0]='<object id="audioplayer2" height="24" width="290" data="' . $base_path . 'sites/all/libraries/player/audio-player/player.swf" type="application/x-shockwave-flash">
                          <param value="' . $base_path . 'sites/all/libraries/player/audio-player/player.swf" name="movie"/>
                          <param value="playerID=2&amp;bg=0xCDDFF3&amp;leftbg=0x357DCE&amp;lefticon=0xF2F2F2&amp;rightbg=0xF06A51&amp;rightbghover=0xAF2910&amp;righticon=0xF2F2F2&amp;righticonhover=0xFFFFFF&amp;text=0x357DCE&amp;slider=0x357DCE&amp;track=0xFFFFFF&amp;border=0xFFFFFF&amp;loader=0xAF2910&amp;soundFile=' . $base_path . 'sites/all/libraries/player/Sample_Track.mp3" name="FlashVars"/>
                          <param value="high" name="quality"/>
                          <param value="false" name="menu"/>
                          <param value="wmode" name="transparent"/>
                          </object>';
 
    }
    if (file_exists($player2)) {
      $players[1]='<object type="application/x-shockwave-flash" width="175" height="14"
                    data="' . $base_path . 'sites/all/libraries/player/xspf_player_slim.swf?song_url=' . $base_path . 'sites/all/libraries/player/Sample_Track.mp3">
                    <param name="movie" value="' . $base_path . 'sites/all/libraries/player/xspf_player_slim.swf?song_url=' . $base_path .'sites/all/libraries/player/Sample_Track.mp3" />
                    </object>';
    }
    if (file_exists($player3)) {
      $players[2]='<object>
                          <param name="autoplay" value="true" />
                          <param name="controller"value="true" /> 
                          <embed src="' . $base_path . 'sites/all/libraries/player/playerSinglePackage/playerSingle.swf"  width="192" height="80" float="left" wmode="transparent" flashvars="soundPath=' . $base_path .'sites/all/libraries/player/Sample_Track.mp3" autostart="true" loop="false"  controller="true" bgcolor="#FF9900" pluginspage="http://www.macromedia.com/go/getflashplayer" >
                          </embed>
                          </object>';
    }
	if (file_exists($player4)) {
      $players[3]='<object>
                          <param name="autoplay" value="true" />
                          <param name="controller"value="true" /> 
                          <embed src="' . $base_path . 'sites/all/libraries/player/OriginalThinMusicPlayer.swf"  width="220" height="21" float="left" wmode="transparent" flashvars="mediaPath=' . $base_path .'sites/all/libraries/player/Sample_Track.mp3&defaultVolume=100" autostart="true" loop="false"  controller="true" bgcolor="#FF9900" pluginspage="http://www.macromedia.com/go/getflashplayer" >
                          </embed>
                          </object>';
    }
    if (file_exists($player5)) {
     $players[4]='<object>
                          <param name="autoplay" value="true" />
                          <param name="controller"value="true" /> 
                          <embed src="' . $base_path . 'sites/all/libraries/player/LWMusicPlayer.swf"  width="65" height="21" float="left" wmode="transparent" flashvars="mediaPath=' . $base_path .'sites/all/libraries/player/Sample_Track.mp3&defaultVolume=100" autostart="true" loop="false"  controller="true" bgcolor="#FF9900" pluginspage="http://www.macromedia.com/go/getflashplayer" >
                           </embed>
                           </object>';
     }
*/
	//Flowplayer support by Rob Loach
	if (module_exists('flowplayer')) {
      $players['flowplayer'] = t('Flowplayer');
    }
	
	if(!empty($players)){
		$form['audiofield_audioplayer'] = array(
		  '#type' => 'radios',
		  '#title' => t('Audio Player'),
		  '#options' => $players,
		  '#default_value' => variable_get('audiofield_audioplayer', 0),
		);
    }
	
	$form['audiofield_players_dir'] = array(
      '#type' => 'textfield',
      '#title' => t('Audio Players Directory'),
	  '#description' => t('Download and extract audio players in this directory'),
      '#default_value' => variable_get('audiofield_players_dir', 'sites/all/libraries/player'),
    );
	
	if(!empty($download_players)){
		$form['audiofield_downloadaudioplayer'] = array(
		  '#type' => 'item',
		  '#title' => t('Download and install audio players'),
		  '#value' => '<ul class="audiofield-download-players">'.$download_players.'</ul>',
		);
	}
	
    return system_settings_form($form);
}


/**
 * Implementation of hook_elements().
 */
function audiofield_elements() {
  $elements = array();
  $filefield_elements = filefield_elements();
  $elements['audiofield_widget'] = $filefield_elements['filefield_widget'];

  $elements['audiofield_widget']['#value_callback'] = 'audiofield_widget_value';
  return $elements;
}

/**
 * Implementation of hook_theme().
 */
function audiofield_theme() {
  $theme= array(
      // Theme an image uploaded to audiofield with alt and title.
      'audiofield_widget' => array(
      'arguments' => array('element' => NULL),
      'file' => 'audiofield_widget.inc',
      ),
      'audiofield_widget_item' => array(
      'arguments' => array('element' => NULL),
      'file' => 'audiofield_widget.inc',
      ),
      'audiofield_widget_preview' => array(
      'arguments' => array('element' => NULL),
      'file' => 'audiofield_widget.inc',
      ),
      'audiofield_widget_file' => array(
      'arguments' => array('element' => NULL),
      'file' => 'audiofield_widget.inc',
      ),
     /* 'audiofield_item' => array(
      'arguments' => array('file' => NULL, 'field' => NULL),
      'file' => 'audiofield_formatter.inc',
      ),
      'audiofield_file' => array(
      'arguments' => array('file' => NULL),
      'file' => 'audiofield_formatter.inc',
      ),*/
      // Themes for the formatters.
      'audiofield_formatter_audiofield_embedded' => array(
      'arguments' => array('element' => NULL),
      'file' => 'audiofield_formatter.inc',
      ),
	  //Theme for the players
	   'audiofield_play_mp3' => array(
      'arguments' => array('element' => NULL),
      'file' => 'audiofield_formatter.inc',
      ),
  );

  return $theme;
}

function audiofield_widget_info() {
  return array(
    'audiofield_widget' => array(
      'label' => t('Audio Upload'),
      'field types' => array('filefield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array('default value' => CONTENT_CALLBACK_CUSTOM),
      'description' => t('Widget for uploading audios.'),
    ),
  );
}

/**
 * Implementation of CCK's hook_widget_settings().
 */
function audiofield_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      return audiofield_widget_settings_form($widget);
    case 'save':
      return audiofield_widget_settings_save($widget);
  }
}

/**
 * Implementation of CCK's hook_widget().
 * 
 * Assign default properties to item and delegate to audiofield.
 */
function audiofield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  // Start with the audiofield widget as a basic start.
  // Note that audiofield needs to modify $form by reference.
  $element = filefield_widget($form, $form_state, $field, $items, $delta);

  return $element;
}


//==========================================//
// DEFINING A FORMATTER
//==========================================//


/**
 * Implementation of hook_field_formatter_info().
 *   
 * All fields should have a 'default' formatter.
 * Any number of other formatters can be defined as well.
 * It's nice for there always to be a 'plain' option
 * for the raw value, but that is not required.
 * 
 */
function audiofield_field_formatter_info() {
  $formatters = array(
    'audiofield_embedded' => array(
      'label' => t('Audio'),
      'field types' => array('filefield'),
      'description' => t('Displays audio embedded in a web page.'),
    ),
  );

  return $formatters;
}


/**
 * Implementation of CCK's hook_default_value().
 */
function audiofield_default_value(&$form, &$form_state, $field, $delta) {
  return filefield_default_value($form, $form_state, $field, $delta);
}

/**
 * Implementation of hook_form_[form_id]_alter().
 *
 * Modify the add new field form to change the default formatter.
 */
function audiofield_form_content_field_overview_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'audiofield_form_content_field_overview_submit';
}

/**
 * Submit handler to set a new field's formatter to "audiofield_embedded".
 */
function audiofield_form_content_field_overview_submit(&$form, &$form_state) {
  if (isset($form_state['fields_added']['_add_new_field']) && isset($form['#type_name'])) {
    $new_field = $form_state['fields_added']['_add_new_field'];
    $node_type = $form['#type_name'];
    $field = content_fields($new_field, $node_type);
    if ($field['widget']['module'] == 'audiofield') {
      foreach ($field['display_settings'] as $display_type => $display_settings) {
        if ($field['display_settings'][$display_type]['format'] == 'default') {
          $field['display_settings'][$display_type]['format'] = 'audiofield_embedded';
        }
      }
      content_field_instance_update($field);
    }
  }
}

/**
 * Implementation of hook_audiofield_players().
 */
function audiofield_players(){
	$players=module_invoke_all('audiofield_players');

	$players['wpaudioplayer']=array(
		'path' => 'audio-player/player.swf',
		'name' => 'WordPress Audio Player',
		'download_link' => 'http://wpaudioplayer.com/download',
		'filetypes' => array('mp3'),
		'callback' =>'audiofield_wpaudioplayer',
	);
	
	$players['xspf_slim']=array(
		'path' => 'xspf_player_slim.swf',
		'name' => 'XSPF Slim Player',
		'download_link' => 'http://sourceforge.net/projects/musicplayer/files/musicplayer/slim-player-0.2.3b/xspf_player_slim-correct-0.2.3.zip/download',
		'filetypes' => array('mp3'),
		'callback' =>'audiofield_xspf_slim',
	);
	
	$players['premium_beat_single_track']=array(
		'path' => 'playerSinglePackage/playerSingle.swf',
		'name' => 'Premium Beat Single Player',
		'download_link' => 'http://www.premiumbeat.com/flash_resources/free_flash_music_player/single_track_flash_mp3_player.php',
		'filetypes' => array('mp3'),
		'callback' =>'audiofield_premium_beat_single_track',
	);
	
	$players['premium_beat_thin']=array(
		'path' => 'OriginalThinMusicPlayer.swf',
		'name' => 'Premium Beat Thin Player',
		'download_link' => 'http://www.premiumbeat.com/flash_music_players/original/thin/',
		'filetypes' => array('mp3'),
		'callback' =>'audiofield_premium_beat_thin',
	);
	
	$players['premium_beat_mini']=array(
		'path' => 'LWMusicPlayer.swf',
		'name' => 'Premium Beat Mini Player',
		'download_link' => 'http://www.premiumbeat.com/flash_music_players/original/mini/',
		'filetypes' => array('mp3'),
		'callback' =>'audiofield_premium_beat_mini',
	);

	return $players;
}
/* Audio Callback Functions */
function audiofield_wpaudioplayer($player_path,$audio_file){
return '<object id="audioplayer2" height="24" width="290" data="' . $player_path . '" type="application/x-shockwave-flash">
                          <param value="' . $player_path . '" name="movie"/>
                          <param value="playerID=2&amp;bg=0xCDDFF3&amp;leftbg=0x357DCE&amp;lefticon=0xF2F2F2&amp;rightbg=0xF06A51&amp;rightbghover=0xAF2910&amp;righticon=0xF2F2F2&amp;righticonhover=0xFFFFFF&amp;text=0x357DCE&amp;slider=0x357DCE&amp;track=0xFFFFFF&amp;border=0xFFFFFF&amp;loader=0xAF2910&amp;soundFile=' . $audio_file . '" name="FlashVars"/>
                          <param value="high" name="quality"/>
                          <param value="false" name="menu"/>
                          <param value="wmode" name="transparent"/>
                          </object>';
}

function audiofield_xspf_slim($player_path,$audio_file){
return '<object type="application/x-shockwave-flash" width="175" height="14"
                    data="' . $player_path . '?song_url=' . $audio_file . '">
                    <param name="movie" value="' . $player_path . '?song_url=' . $audio_file .'" />
                    </object>';
}

function audiofield_premium_beat_single_track($player_path,$audio_file){
return '<object><param name="autoplay" value="true" />
                <param name="controller"value="true" /> 
                <embed src="' . $player_path . '"  width="192" height="80" float="left" wmode="transparent" flashvars="soundPath=' . $audio_file .'" autostart="true" loop="false"  controller="true" bgcolor="#FF9900" pluginspage="http://www.macromedia.com/go/getflashplayer" >
                </embed></object>';
}

function audiofield_premium_beat_thin($player_path,$audio_file){
return '<object><param name="autoplay" value="true" />
                <param name="controller"value="true" /> 
                <embed src="' . $player_path . '"  width="220" height="21" float="left" wmode="transparent" flashvars="mediaPath=' . $audio_file .'&defaultVolume=100" autostart="true" loop="false"  controller="true" bgcolor="#FF9900" pluginspage="http://www.macromedia.com/go/getflashplayer" >
                </embed></object>';
}

function audiofield_premium_beat_mini($player_path,$audio_file){
return '<object><param name="autoplay" value="true" />
            <param name="controller"value="true" /> 
            <embed src="' . $player_path . '"  width="65" height="21" float="left" wmode="transparent" flashvars="mediaPath=' . $audio_file .'&defaultVolume=100" autostart="true" loop="false"  controller="true" bgcolor="#FF9900" pluginspage="http://www.macromedia.com/go/getflashplayer" >
            </embed></object>';
}